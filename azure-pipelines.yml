# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger: none
pool:
  name: Azure Pipelines
  vmImage: 'ubuntu-16.04'
variables:
- group: 'Secrets'
- group: 'Subscription'
steps:
- task: JamiePhillips.Terraform.TerraformTool.TerraformTool@0
  displayName: 'Use Terraform $(terraform.version)'
  inputs:
    version: '0.11.12'
- script: |
   az login --service-principal -u $(tfsp-id) -p $(tfsp-secret) --tenant $(tenant_id)
   ACCESS_KEY=`az storage account keys list -n $(storage_acct) -o json | jq -r '.[0].value'`
   echo "##vso[task.setvariable variable=ACCESS_KEY]$ACCESS_KEY"
  displayName: 'AZ Login and Set ACCESS_KEY'
- script: |
   cat << EOT >> terraform.tfvars
   access_key = "$(ACCESS_KEY)"
   tenant_id = "$(tenant_id)"
   subscription_id = "$(subscription_id)"
   client_id = "$(client_id)"
   client_secret = "$(Client_Secret)"
   EOT
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Create terraform.tfvars'
- script: |
   terraform init -backend-config=resource_group_name=$(resource_group) -backend-config=storage_account_name=$(storage_acct) -backend-config=container_name=state -backend-config=key=output.tfstate -backend-config=access_key=$(ACCESS_KEY) -no-color -input=false
  displayName: 'Terraform Init'
  workingDirectory: '$(System.DefaultWorkingDirectory)'
- script: |
   terraform validate
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Terraform Validate'
- script: |
   terraform plan -out=tfplan -no-color -input=false
  displayName: 'Terraform Plan'
  workingDirectory: '$(System.DefaultWorkingDirectory)'
- script: |
   terraform apply -auto-approve
  displayName: 'Terraform Apply'
  workingDirectory: '$(System.DefaultWorkingDirectory)'
- script: |
   ACCOUNT_ID=`terraform output batch_account_id`
   ACCOUNT_NAME=`terraform output batch_account_name`
   POOL_NAME=`terraform output batch_pool_name`
   echo "##vso[task.setvariable variable=ACCOUNT_ID]$ACCOUNT_ID"
   echo "##vso[task.setvariable variable=ACCOUNT_NAME]$ACCOUNT_NAME"
   echo "##vso[task.setvariable variable=POOL_NAME]$POOL_NAME"
  displayName: 'Get TF output and set to vars'
- script: |
   az batch account login -n $(ACCOUNT_NAME) -g Batch --shared-key-auth
  displayName: 'Login to the new batch account'
- script: |
   az batch job create --id myjob --pool-id $(POOL_NAME)
  displayName: 'Create a new batch job'